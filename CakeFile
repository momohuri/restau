watch           = require 'watch'
fs              = require 'fs'
_               = require 'underscore'
_.str           = require 'underscore.string';
{exec}          = require 'child_process'

PATH_TO_SRC     = 'src'
PATH_TO_PUBLIC  = 'public'

path_to_js_output       = "#{PATH_TO_PUBLIC}/js"
path_to_css_output      = "#{PATH_TO_PUBLIC}/css"
path_to_template_output = "#{path_to_js_output}/templates.js"
      
task 'watch:l', 'build Less files', (file) ->
  path_to_src = "#{PATH_TO_SRC}/styles"
      
  watch.watchTree path_to_src, () ->
    fs.readdir path_to_src, (err, files) ->
      _.each files, (file) ->
        if /^(.+)\.less$/.test(file)
          save_as = file.replace(/.less$/, '.css')
          exec "lessc -f #{path_to_src}/#{file} #{path_to_css_output}/#{save_as}", (err, stdout, stderr) ->
            if stderr
              console.error "ERROR: #{err} || #{stdout} || #{stderr}"
            else
              console.log "lessc: compiling #{file}"
              
task 'watch:t', 'build templates', (options) ->
  path_to_src = "#{PATH_TO_SRC}/templates"
  tmpl_namespace = options.namespace or= 'restau.tmpl'

  watch.watchTree path_to_src, () ->
    templates = """
        window.#{tmpl_namespace} = window.#{tmpl_namespace} || {};\n
    """
    
    parseDirectory = (directory, prefix) ->
      filesOrDirectories = fs.readdirSync directory

      _.each filesOrDirectories, (fileOrDirectory) ->
        fullpath = "#{directory}/#{fileOrDirectory}"
        if fs.statSync(fullpath).isDirectory()
          parseDirectory fullpath
        else if /^(.+)\.html$/.test(fileOrDirectory)
          tmpl = fs.readFileSync fullpath, 'utf-8'

          # grab the identifier from the path
          identifier = fullpath.replace /^src\/templates\/(.+).html/, () -> 
            arguments[1].replace(/\//g, '.').replace /(-.)/g, () -> 
              arguments[0].substring(1).toUpperCase()

          # test for additional namespaces in the identifer
          namespaces = identifier.match /((?:.+))\./

          # create it if it doesn't exist
          if namespaces
            namespaces = namespaces[1].split('.')
            ns = namespaces.shift()
            while (ns)
              declaration = "#{tmpl_namespace}.#{ns} = #{tmpl_namespace}.#{ns} || {};\n"
              templates += declaration if !new RegExp(declaration.replace(/[-[\]{}()\*\+?.,\\^$|#\s]/g, '\\$&')).test(templates)
              if namespaces.length
                ns += '.' + namespaces.shift()
              else
                ns = false

          # compile the template  
          template = _.template(tmpl).source
          templates += "#{tmpl_namespace}.#{identifier} = #{template};\n"
    
    parseDirectory path_to_src

    fs.writeFile path_to_template_output, templates, (err) ->
      if err
        console.error "ERROR #{err}"
      else
        console.log "underscore: compiling #{path_to_template_output}"

task 'watch:all', 'watch everything', (options) ->
  invoke 'watch:l'
  invoke 'watch:t'